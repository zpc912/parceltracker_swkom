#Workflow name
name: Master CI
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    environment: DATABASE
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      ################
      #Adding Secrets#
      ################
      - name: Adding Secrets
 #       env:
 #         USER: ${{ env.DB_USER }}
 #         PASSWORD: ${{ env.DB_PASS }}
 #         TEST: hello world
        run: |
          sed -i 's/USER_HOLDER/${{ env.DB_USER }}/g;s/PASS_HOLDER/${{ env.DB_PASS }}/g' /home/runner/work/parceltracker_swkom/parceltracker_swkom/src/main/resources/application.properties
      #Run Tests
      - name: Run Tests
        run: mvn -B test
  #Build's job
  build:
    #Depends on sonar's job
    needs: tests
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/openapi-spring-1.22.1.jar
  #Deploy's job
  deploy:
    #Depends on build's job
    needs: build
    name: Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: artifact
      #Deploy the artifact (JAR) into AWS Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          use_existing_version_if_available: false
          application_name: parceltracker-deploy
          environment_name: Parceltrackerdeploy-env
          version_label: ${{github.SHA}}
          region: us-east-1
          deployment_package: openapi-spring-1.22.1.jar